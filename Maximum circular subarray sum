//Time Complexity : O(n)

#include <stdio.h>

int arrange(int a[],int n)
{
    // get the maximum sum from kadane's algorithm
    int max_kadane = kadane(a,n);
    
    //find the maximum elements including corner elements
    int max_wrap = 0;
    
    for(int i=0;i<n;i++)
    {
        max_wrap += a[i];  // array sum
        a[i] = -a[i];
    }
    // max sum with corner elements will be 
    // arraysum - (-max sub array sum of inverted array)
    max_wrap = max_wrap+kadane(a,n);
    
    return (max_wrap>max_kadane) ? max_wrap : max_kadane;
}

//maximum subarray sum
int kadane(int a[],int n)
{
    int max_so_far=0;
    int max_end=0;
    
    for(int i=0;i<n;i++)
    {
        max_end= max_end+a[i];
        if(max_end<0)
        max_end=0;
        else if(max_so_far < max_end)
        max_so_far=max_end;
    }
   
    return max_so_far;
}

int main()
{
    int a[]={8, -8, 9, -9, 10, -11, 12};
    int n=sizeof(a)/sizeof(a[0]);
    
   printf("%d",arrange(a,n));
    
    return 0;
}
