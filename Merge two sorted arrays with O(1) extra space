//Time complexity  :O(n)
#include <stdio.h>

int cmp(const void *a,const void *b)
{
    return (*(int*)a-*(int*)b);
}

void swap(int *a,int *b)
{
    int t=*a;
    *a=*b;
    *b=t;
}
void merge(int a[],int m,int b[],int n)
{
    int l,r;
    qsort(a,m,sizeof(int),cmp);
    qsort(b,n,sizeof(int),cmp);
    
    for(int i=0;i<m;i++)
    printf("%d ",a[i]);
    printf("\n");
    for(int i=0;i<n;i++)
    printf("%d ",b[i]);
    printf("\n\n");
    
    for(int i=1;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            if(a[i]>b[j])
            {
                swap(&a[i],&b[j]);
            }
        }
    }
    
    for(int i=0;i<m;i++)
    printf("%d ",a[i]);
    printf("\n");
    for(int i=0;i<n;i++)
    printf("%d ",b[i]);
}
int main()
{
   int a[]={1, 5, 9, 10, 15, 20};
   int b[]= {2, 3, 8, 13};
   int m=sizeof(a)/sizeof(a[0]);
   int n=sizeof(b)/sizeof(b[0]);
   
   merge(a,m,b,n);
     return 0;
}
