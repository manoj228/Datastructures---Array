// Time complexity : O(n Logn)

#include <stdio.h>

void swap(int *l,int *r)
{
    int t=*l;
    *l=*r;
    *r=t;
}

void reverse(int a[],int l,int r)
{
    if(l<r)
    {
        swap(&a[l],&a[r]);
        reverse(a,++l,--r);
    }
}

void merge(int a[],int l,int mid,int r)
{
    int i=l;            // index of 1st array
    int j=mid+1;        // index of 2nd array
    
    // a[l...m] is positive
    while(i<=mid && a[i]<0)
    i++;
     
    // a[mid+1 ...r] is positive
    while(j<=r && a[j]<0)
    j++;
    
    reverse(a,i,mid);
    reverse(a,mid+1,j-1);
    reverse(a,i,j-1);
}

void arrange(int a[],int l,int r)
{
  if(l<r)
  {
      int mid=l+(r-l)/2;
      arrange(a,l,mid);
      arrange(a,mid+1,r);
      
      merge(a,l,mid,r);
  }
}

int main()
{
    int a[]={ -12, 11, -13, -5, 6, -7, 5, -3, -6 }; 
    int n=sizeof(a)/sizeof(a[0]);
    
    arrange(a,0,n-1);
    
    for(int i=0;i<n;i++)
    printf("%d\t",a[i]);
    
    return 0;
}
