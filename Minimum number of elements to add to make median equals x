//Time complexity  : O(knlogn)
#include <stdio.h>

int cmp(const void *a,const void *b)
{
    return (*(int*)a-*(int*)b);
}

void minno(int a[],int n,int x)
{
    qsort(a,n,sizeof(int),cmp);
    int i;
    for(i=0;a[(n-1)/2]!=x;i++)
    {
        a[n++]=x;
        qsort(a,n,sizeof(int),cmp);
    }
   printf("%d",i);
}

int main()
{
    int a[]={1,2,3};
    int x=3;
    int n=sizeof(a)/sizeof(a[0]);
    
    minno(a,n,x);
    return 0;
}

/*
// CPP program to find minimum number of 
// elements to add so that its median 
// equals x. 
#include <bits/stdc++.h> 
using namespace std; 

int minNumber(int a[], int n, int x) 
{ 
	int l = 0, h = 0, e = 0; 
	for (int i = 0; i < n; i++) { 

		// no. of elements equals to x, 
		// that is, e. 
		if (a[i] == x) 
			e++; 

		// no. of elements greater than x, 
		// that is, h. 
		else if (a[i] > x) 
			h++; 

		// no. of elements smaller than x, 
		// that is, l. 
		else if (a[i] < x) 
			l++; 
	} 

	int ans = 0; 
	if (l > h) 
		ans = l - h; 
	else if (l < h) 
		ans = h - l - 1; 
	
	// subtract the no. of elements 
	// that are equal to x. 
	return ans + 1 - e; 
} 

// Driver code 
int main() 
{ 
	int x = 10; 
	int a[] = { 10, 20, 30 }; 
	int n = sizeof(a) / sizeof(a[0]); 
	cout << minNumber(a, n, x) << endl; 
	return 0; 
} 

 */
