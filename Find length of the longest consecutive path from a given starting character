// Time complexity : O(n*n)
#include <stdio.h>

void findLongestPath(char a[3][3],int n,char s)
{
    int i,j,k,l,cnt=0;
    char c;
    for(i=0;i<n;i++)
    {
        for(j=0;j<n;j++)
        {
            if(a[i][j]=='e')
            {
                k=i;
                l=j;
                break;
            }
        }
    }
    c=a[k][l];
    while(1)
    {
        //all cases
        //bottom
        if(a[k+1][l] == c+1)
        c=a[++k][l];
        
        //top
        else if(a[k-1][l] == c+1)
        c=a[--k][l];
        
        //left
        else if(a[k][l-1] == c+1)
        c=a[k][--l];
        
        //right
        else if(a[k][l+1] == c+1)
        c =a[k][++l];
        
        //right bottom
        else if(a[k+1][l+1] ==c+1)
        c=a[++k][++l];
        
        //left top
        else if(a[k-1][l-1] == c+1)
        c=a[--k][--l];
        
        //left bottom
        else if(a[k+1][l-1] == c+1)
        c=a[++k][--l];
        
        //right top
        else if(a[k-1][l+1] == c+1)
        c=a[--k][++l];
        
        else
        {break;
        } 
        printf("%c ",c);
    }
   
}

int main()
{
   char a[][3] ={ {'a', 'c', 'd'},
                   {'h', 'b', 'e'},
                   {'i', 'g', 'f'}};
    int n=3;
    char c='e';
    findLongestPath(a,n,c);

    return 0;
}
