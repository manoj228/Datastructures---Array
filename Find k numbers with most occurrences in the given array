//Time complexity : O(nlogn + n*n)
#include <stdio.h>

void swap(int *a,int *b)
{
    int t=*a;
    *a=*b;
    *b=t;
}

void bubblesort(int a[],int n)
{
    for(int i=0;i<n;i++)
    for(int j=0;j<n-1-i;j++)
    {
        if(a[j]>a[j+1])
        {
            swap(&a[j],&a[j+1]);
        }
    }
    for(int i=0;i<n;i++)
    printf("%d ",a[i]);
    printf("\n");
}

int cmp(const void *a,const void *b)
{
    return (*(int*)b-*(int*)a);
}

void occurance(int a[],int n,int k)
{
    int max,fr[n],s,b[n];
    
    //initialise freq to 1
    for(int i=0;i<n;i++)
    fr[i]=1;
    
    for(int i=0;i<n-1;i++)
    {
        for(int j=i+1;j<n;j++)
        {
            if(a[i]==a[j])
            {
               fr[i]++;
            }
        }printf("%d ",fr[i]);
        b[i]=fr[i];
    }
     printf("\n");
     qsort(b,n,sizeof(int),cmp);
    for(int i=0;i<n-1;i++)
        printf("%d ",b[i]);
     printf("\n");
     
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<k-1;j++)
        {
            if(fr[i]==b[j])
            {
            printf("%d ",a[i]);
            }
        }
    }
  
    
}
int main()
{
   int a[]= {7, 10, 11, 5, 2, 5, 5, 7, 11, 8, 9};
   int k = 4,n=sizeof(a)/sizeof(a[0]);
          
  bubblesort(a,n);
  occurance(a,n,k);
  
    return 0;
}
